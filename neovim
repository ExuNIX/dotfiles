"*--------------------------------------*
"|         ExuNIX NeoViM config         |
"|                                      |
"| Filename: 	init.vim	            |
"| Author: 	    ExuNIX                  |
"| Revision: 	11/04/2018              |
"|                                      |
"*--------------------------------------*
"          Veritas Librabit Vos

" -----------------------------------------------
" ---------- ViMPlug Plugin Management ----------
" -----------------------------------------------
set nocompatible                           
filetype off
call plug#begin('~/.config/nvim/autoload/')

" Plugins------------------------------------------------------------------------
" ViM Minimap
Plug 'severin-lemaignan/vim-minimap'
" Language-Server for NeoVim
"Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
" Fuzzy-finder Multi-entry selection UI.
Plug 'junegunn/fzf'
" Ale
Plug 'w0rp/ale'                                 "Asynchronous Linter Engine
" NERDTree
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeTabsToggle' }     "Project dir management
Plug 'Xuyuanp/nerdtree-git-plugin'                              "Git status in NERDTREE
Plug 'jistr/vim-nerdtree-tabs'                                  "Fixed single NERDTREE in all tabs
"Completion integration with nvim-completion-manager.
"Plug 'roxma/nvim-completion-manager'
Plug 'roxma/clang_complete'
"Completion integration with deoplete.
"Plug 'zchee/deoplete-clang'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" ViM Obsession
Plug 'tpope/vim-obsession'
" ViM Airlinw
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Tmuxline
Plug 'edkolev/tmuxline.vim'
" C++ async semantic highlight 
Plug 'arakashic/chromatica.nvim'
" ViM Fugitive
Plug 'tpope/vim-fugitive'
" SuperTab
Plug 'ervandew/supertab'
" C/C++ support with compile, run, idioms, snippets, templates and comments enhancements
Plug 'vim-scripts/c.vim'
" NeoTex LaTeX live preview.
Plug 'lervag/vimtex'
Plug 'donRaphaco/neotex', { 'for': 'tex' }
" C++ synatx Highlight
Plug 'octol/vim-cpp-enhanced-highlight'
"vim-go GoLang Support
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
"Jedi Vim
Plug 'davidhalter/jedi-vim'
" Monokai theme
"Plug 'sickill/vim-monokai'
"Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
call plug#end()
"--------------------------------------------------------------------------------


" Set theme and colorscheme
" Set Truecolor support 
" The "^[" is a single character. You enter it by pressing Ctrl+v and then ESC.
set t_8f=^[[38;2;%lu;%lu;%lum
set t_8b=^[[48;2;%lu;%lu;%lum
" Makes the background transparent. Leave these out if you're not using a transparent
" terminal.
highlight Normal ctermbg=NONE guibg=NONE
highlight NonText ctermbg=NONE guibg=NONE
" This is what sets vim to use 24-bit colors. It will also work for any version of neovim
" newer than 0.1.4.
set termguicolors

" cursor line and column
set cursorline
"autocmd InsertEnter * highlight CursorLine guibg=#000050 guifg=fg
"autocmd InsertLeave * highlight CursorLine guibg=#004000 guifg=fg

" set cursorcolumn
"autocmd InsertEnter * highlight CursorColumn ctermfg=White ctermbg=Yellow cterm=bold guifg=white guibg=yellow gui=bold
"autocmd InsertLeave * highlight CursorColumn ctermfg=Black ctermbg=Yellow cterm=bold guifg=Black guibg=yellow gui=NONE

colorscheme onedark

" -----------------------------------------------
" ------------ Plugin Configuration -------------
" -----------------------------------------------

" Airline------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tabline#enabled = 2
let g:airline#extensions#ale#enabled = 1

"let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"let g:airline#extensions#tabline#right_sep = ' '
"let g:airline#extensions#tabline#right_alt_sep = '|'
"let g:airline_left_sep = ' '
"let g:airline_left_alt_sep = '|'
"let g:airline_right_sep = ' '
"let g:airline_right_alt_sep = '|'
"let g:airline_theme= 'gruvbox' 
" CLANG Complete-----------------------------------------------------------------
" path to directory where library can be found
" Integrate with Neomake
"let g:neomake_cpp_enabled_makers = ['clang']
"let g:neomake_c_enabled_makers = ['clang']


"Ale Linting---------------------------------------------------------------------
" Enable completion where available.
let g:ale_completion_enabled = 1
" Change sign column color.
let g:ale_change_sign_column_color = 1
" Realtime Linting Delay
let g:ale_lint_delay=500
" C++ Options
let g:ale_linters={
      \ 'cpp': ['clang', 'clang-check', 'clangtidy', 'cpplint']
      \ }
let g:ale_cpp_clang_executable = 'clang++'
let g:ale_cpp_clang_options = '-std=c++14 -Wall'
let g:ale_cpp_clangcheck_executable = 'clang-check'
let g:ale_cpp_clangcheck_options = ''
let g:ale_cpp_clangtidy_checks = ['*']
let g:ale_cpp_clangtidy_executable = 'clang-tidy'
let g:ale_cpp_clangtidy_options = ''
let g:ale_cpp_cpplint_executable = 'cpplint'
let g:ale_cpp_cpplint_options = ''

" CLang--------------------------------------------------------------------------
let g:clang_library_path = '/usr/lib64/libclang.so'
let g:clang_user_options = '-std=c++14'
" Minimap------------------------------------------------------------------------
let g:minimap_highlight= 'Visual'

" NeoMake------------------------------------------------------------------------
" When writing a buffer.
"call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 750ms).
"call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing.
"call neomake#configure#automake('rw', 1000)
" Open the list automatically:
"let g:neomake_open_list = 2

" NERDTree-----------------------------------------------------------------------
" Opens NERDTree automatically at startup
autocmd vimenter * NERDTreeTabs
" Closes NeoViM if NERDTree buffer is the only on left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Default arrows
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" Keymap to CTRL n
map <C-n> :NERDTreeToggle<CR>
map <C-N> :NERDTreeTabsToggle<CR>


" Language-Server for NeoVim-----------------------------------------------------
" Required for operations modifying multiple buffers like rename.
"set hidden

"let g:LanguageClient_serverCommands = {}
" Automatically start language servers.
"let g:LanguageClient_autoStart = 1
"set completefunc=LanguageClient#complete
" Keymaps
"nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
"nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
"nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" Chromatica----------------------------------------------------------------------
let g:chromatica#enable_at_startup=1
let g:chromatica#responsive_mode=1
let g:chromatica#highlight_feature_level=1

" Deoplete------------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path='/usr/lib64/libclang.so'

" NeoTex--------------------------------------------------------------------------
let g:neotex_enabled = 2
" C++ enhanced
" Highlight-----------------------------------------------------------------------
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" jedi-vim {
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"

let g:jedi#goto_assignments_command = "<leader>pa"
let g:jedi#goto_definitions_command = "<leader>pd"
let g:jedi#documentation_command = "<leader>pk"
let g:jedi#usages_command = "<leader>pu"
let g:jedi#rename_command = "<leader>pr"
" }
"
"
"
"         SETS
" ----------------------
" dark background
set background=dark
" Set tabs and indents (for go)
set ts=4
set shiftwidth=4
set ai sw=4
set smartindent
" Sets wrap column
set colorcolumn=120
highlight ColorColumn ctermbg=darkgray

" replace tab with spaces
set expandtab

" highlight matches when searching
" Use C-l to clear (see key map section)
set hlsearch

" Line numbering
" Toggle set to ';n' in key map section
set number

" Disable line wrapping
" Toggle set to ';w' in key map section
"set nowrap

" enable line and column display
set ruler

"disable showmode since using vim-airline; otherwise use 'set showmode'
set noshowmode

" Incremental search and search highlight
set incsearch

" file type recognition
filetype on
filetype plugin on
filetype indent on

" open new split panes to right and below.
set splitright
set splitbelow

" Minimum number of screen rows above and below the cursor
set scrolloff=4

" autoload changes made to files outside vim.
set autoread

" cmdline completion help
set wildmenu
" Always show the status line
set laststatus=2

" File type preferences
set fileformats=unix,dos

" Don't create backups
set nobackup
set nowb

" Turn off swapfiles
set noswapfile

" Buffesecreen updates to speed up macros etc.
"set lazyredraw background=dark

" FileType Detection




